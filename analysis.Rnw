%\VignetteEngine{knitr::knitr_notangle}

\documentclass{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}


\usepackage{bookmark}
\pdfbookmark{\contentsname}{Contents}

\begin{document}

<<setup-knitr, cache=FALSE, echo=FALSE>>=
library(knitr)
opts_chunk$set(fig.path="figure/pre-", cache.path="cache/pre-")
@

\section{Explore data}

<<setup, cache=TRUE, echo=TRUE>>=
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(reshape2))

# read in the csv data
x <- read.csv("data/mergedMamCs.csv")

# limit the data to timepoints 1 and 5
x <- filter(x, TimePt == 1 || TimePt == 5) %>%
#  delete "mean50", "dsScaSco" and their associated change scores
     select(-mean50, -dsScaSco, -mean50cs, -dsScaScoCs) %>%
# rename T_score_CW variable
     rename(stroop_score = T_score_CW ) %>%
# we only want to look at people that are off meds
     filter(DrugStatusOn == 0)

variables.list <- list(ptpmovement=c("pv", "tpv", "ag1Dur", "qAg1", "ag1overt1", "q30", "qAg", 
                                     "nab", "qAnt", "Concon_Pre_flex_1", "Concon_Post_flex_1"),
                       strength=c("flMVC", "ex_abs_Pk_Tor"), 
                       hold.release=c("tr50", "td50"), 
                       cognition=c("dig_sum", "stroop_score", "bta_SUM"), 
                       physical=c("PPT", "STS", "FRTCM", "TUG", "BBS", "SMW_M", "FFWS")
                      )
variables <- unlist(variables.list, use.names=FALSE)
                      
clinical.variables <- c("updrs", "brady", "rigid", "tremor", "axial")

new.change.variables <- c(variables, clinical.variables)

misc.variables <- c("id", "TimePt", "Group", "completers", "pairnum")

# variables to log transform in place
log.trans.variables <- c(variables.list$ptpmovement, variables.list$strength)
x <- x %>% mutate_each(funs(log), one_of(log.trans.variables)) 

#split the dataframe into 24 months and baseline
d.24 <- filter(x, TimePt == 5)
d.0 <- filter(x, TimePt == 1)

# check that the patient id match in the two sets
all.equal(d.24$id, d.0$id)

# change scores are the difference between d.24 and d.0 variables
cs <- d.24[, new.change.variables] - d.0[, new.change.variables]
cs$id <- d.24$id
cs$Group <- factor(d.24$Group, levels=c(0,1), labels=c("FC", "PRE"))
@



\newpage

\section{Plots of change scores}

<<plots-of-change-scores-pv, cache=TRUE, echo=TRUE, fig.height=6, fig.width=8>>=
cs.melt <- melt(cs, id.vars=c(clinical.variables, "id", "Group"))
cs.melt.list <- lapply(variables.list, function(z) filter(cs.melt, variable %in% z))
# split up the variables so the graphs aren't too busy
cs.melt.list[["ptp1"]] = filter(cs.melt.list$ptpmovement, variable %in% variables.list$ptp[1:5])
cs.melt.list[["ptp2"]] = filter(cs.melt.list$ptpmovement, variable %in% variables.list$ptp[-c(1:5)])
cs.melt.list[["ptpmovement"]] <- NULL

#test out a graph for one variable
qplot(pv, updrs, data=cs, geom="point") + geom_smooth(method="lm")

# run a correlation test on two variables
GetCorTestValues <- function(d, var1, var2) {
  ret <- cor.test(d[[var1]], d[[var2]])
  ret <- c(ret$estimate, ret$df, p.value=ret$p.value, ret$parameter, ret$statistic)
  rbind(ret)
}
#GetCorTestValues(cs, "updrs", "pv")

# split dataframe by drug status and run two correlation tests
GetTestByGroup <- function(d, var1, var2) {
  ret.0 <- GetCorTestValues(filter(d, Group=="FC") , var1, var2)
  ret.1 <- GetCorTestValues(filter(d, Group=="PRE") , var1, var2)
  ret <- rbind.data.frame(ret.0, ret.1)
  ret$Group <- c(0,1)
  ret$var1 <- var1
  ret$var2 <- var2
  row.names(ret) <- NULL
  ret
}
#GetTestByGroup(cs, "updrs", "pv")

GetTestResultsbyResponseVariable <- function(d, response_var, indep_vars_list) {
  ret <- do.call(rbind.data.frame, 
    lapply(indep_vars_list, function(z) GetTestByGroup(d, response_var, z)))
  ret %>% mutate(sig=ifelse(abs(t)>2, "*", ""), cor=round(cor,2), t=round(t,2),
                 p.value=round(p.value,2)) %>% 
          select(resp=var1, indep=var2, grp=Group, 
                 cor, p.value, df, t, sig) 
}
#GetTestResultsbyResponseVariable(cs, "updrs", variables.list$ptp[1:5])

# run a regression two variables by group
# summary(lm("updrs ~ pv + Group + pv:Group", data=cs))
# Then run anova on the result
GetRegressionCoefValues <- function(d, var1, var2) {
  form_string <- paste(var1, "~", var2, "+ Group + ", var2, "*Group")
  lm_results <-  lm(form_string, data=d)
  an_results <- anova(lm_results)
  ret <- as.data.frame(an_results[3, ]) # interaction term
  colnames(ret) <- c("df", "Sum.Sq", "Mean.Sq", "F.value", "p.value")
  ret$var1 <- var1
  ret$var2 <- var2
  ret
}
#GetRegressionCoefValues(cs, "updrs", "pv")

GetRegResultsbyResponseVariable <- function(d, response_var, indep_vars_list) {
  ret <- do.call(rbind.data.frame, 
    lapply(indep_vars_list, function(z) GetRegressionCoefValues(d, response_var, z)))
  ret %>% mutate(sig=ifelse(abs(p.value)<0.05, "*", ""), F=round(F.value,2),
                 p.value=round(p.value,2)) %>% 
          select(resp=var1, indep=var2, p.value, F, sig) 
}
#GetRegResultsbyResponseVariable(cs, "updrs", variables.list$ptp[1:5])
@

\newpage

\subsection{PtP movement variables}

<<regresions>>=
results <- lm("updrs ~ pv + Group +  pv*Group", data=cs)
summary(results)
anova(results)
@

<<plots-of-change-scores-ptp, echo=TRUE, cache=TRUE, fig.height=6, fig.width=8>>=
qplot(value, updrs, data=cs.melt.list$ptp1, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "updrs", variables.list$ptp[1:5])
GetRegResultsbyResponseVariable(cs, "updrs", variables.list$ptp[1:5])
qplot(value, axial, data=cs.melt.list$ptp1, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "axial", variables.list$ptp[1:5])
GetRegResultsbyResponseVariable(cs, "axial", variables.list$ptp[1:5])
qplot(value, tremor, data=cs.melt.list$ptp1, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "tremor", variables.list$ptp[1:5])
GetRegResultsbyResponseVariable(cs, "tremor", variables.list$ptp[1:5])
qplot(value, brady, data=cs.melt.list$ptp1, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "brady", variables.list$ptp[1:5])
GetRegResultsbyResponseVariable(cs, "brady", variables.list$ptp[1:5])
qplot(value, rigid, data=cs.melt.list$ptp1, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "rigid", variables.list$ptp[1:5])
GetRegResultsbyResponseVariable(cs, "rigid", variables.list$ptp[1:5])

qplot(value, updrs, data=cs.melt.list$ptp2, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "updrs", variables.list$ptp[-c(1:5)])
GetRegResultsbyResponseVariable(cs, "updrs", variables.list$ptp[-c(1:5)])
qplot(value, axial, data=cs.melt.list$ptp2, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "axial", variables.list$ptp[-c(1:5)])
GetRegResultsbyResponseVariable(cs, "axial", variables.list$ptp[-c(1:5)])
qplot(value, tremor, data=cs.melt.list$ptp2, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "tremor", variables.list$ptp[-c(1:5)])
GetRegResultsbyResponseVariable(cs, "tremor", variables.list$ptp[-c(1:5)])
qplot(value, brady, data=cs.melt.list$ptp2, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "brady", variables.list$ptp[-c(1:5)])
GetRegResultsbyResponseVariable(cs, "brady", variables.list$ptp[-c(1:5)])
qplot(value, rigid, data=cs.melt.list$ptp2, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "rigid", variables.list$ptp[-c(1:5)])
GetRegResultsbyResponseVariable(cs, "rigid", variables.list$ptp[-c(1:5)])
@

\newpage

\subsection{Strength variables}
<<plots-of-change-scores-strength, echo=TRUE, cache=TRUE, fig.height=6, fig.width=8 >>=
qplot(value, updrs, data=cs.melt.list$strength, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "updrs", variables.list$strength)
GetRegResultsbyResponseVariable(cs, "updrs", variables.list$strength)
qplot(value, axial, data=cs.melt.list$strength, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "axial", variables.list$strength)
GetRegResultsbyResponseVariable(cs, "axial", variables.list$strength)
qplot(value, tremor, data=cs.melt.list$strength, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "tremor", variables.list$strength)
GetRegResultsbyResponseVariable(cs, "tremor", variables.list$strength)
qplot(value, brady, data=cs.melt.list$strength, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "brady", variables.list$strength)
GetRegResultsbyResponseVariable(cs, "brady", variables.list$strength)
qplot(value, rigid, data=cs.melt.list$strength, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "rigid", variables.list$strength)
GetRegResultsbyResponseVariable(cs, "rigid", variables.list$strength)
@

\newpage

\subsection{Hold Release variables}
<<plots-of-change-scores-hold, echo=TRUE, cache=TRUE, fig.height=6, fig.width=8 >>=
qplot(value, updrs, data=cs.melt.list$hold.release, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "updrs", variables.list$hold.release)
GetRegResultsbyResponseVariable(cs, "updrs", variables.list$hold.release)
qplot(value, axial, data=cs.melt.list$hold.release, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "axial", variables.list$hold.release)
GetRegResultsbyResponseVariable(cs, "axial", variables.list$hold.release)
qplot(value, tremor, data=cs.melt.list$hold.release, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "tremor", variables.list$hold.release)
GetRegResultsbyResponseVariable(cs, "tremor", variables.list$hold.release)
qplot(value, brady, data=cs.melt.list$hold.release, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "brady", variables.list$hold.release)
GetRegResultsbyResponseVariable(cs, "brady", variables.list$hold.release)
qplot(value, rigid, data=cs.melt.list$hold.release, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "rigid", variables.list$hold.release)
GetRegResultsbyResponseVariable(cs, "rigid", variables.list$hold.release)
@

\newpage

\subsection{Cognition variables}
<<plots-of-change-scores-cognition, echo=TRUE, cache=TRUE, fig.height=8, fig.width=8.8 >>=
qplot(value, updrs, data=cs.melt.list$cognition, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "updrs", variables.list$cognition)
GetRegResultsbyResponseVariable(cs, "updrs", variables.list$cognition)
qplot(value, axial, data=cs.melt.list$cognition, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "axial", variables.list$cognition)
GetRegResultsbyResponseVariable(cs, "axial", variables.list$cognition)
qplot(value, tremor, data=cs.melt.list$cognition, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "tremor", variables.list$cognition)
GetRegResultsbyResponseVariable(cs, "tremor", variables.list$cognition)
qplot(value, brady, data=cs.melt.list$cognition, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "brady", variables.list$cognition)
GetRegResultsbyResponseVariable(cs, "brady", variables.list$cognition)
qplot(value, rigid, data=cs.melt.list$cognition, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "rigid", variables.list$cognition)
GetRegResultsbyResponseVariable(cs, "rigid", variables.list$cognition)
@

\newpage

\subsection{Physical variables}
<<plots-of-change-scores-physical, echo=TRUE, cache=TRUE, fig.height=6, fig.width=8 >>=
qplot(value, updrs, data=cs.melt.list$physical, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "updrs", variables.list$physical)
GetRegResultsbyResponseVariable(cs, "updrs", variables.list$physical)
qplot(value, axial, data=cs.melt.list$physical, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "axial", variables.list$physical)
GetRegResultsbyResponseVariable(cs, "axial", variables.list$physical)
qplot(value, tremor, data=cs.melt.list$physical, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "tremor", variables.list$physical)
GetRegResultsbyResponseVariable(cs, "tremor", variables.list$physical)
qplot(value, brady, data=cs.melt.list$physical, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "brady", variables.list$physical)
GetRegResultsbyResponseVariable(cs, "brady", variables.list$physical)
qplot(value, rigid, data=cs.melt.list$physical, geom="point", color=Group) + 
      facet_wrap(~variable, scales="free_x") + geom_smooth(method="lm")
GetTestResultsbyResponseVariable(cs, "rigid", variables.list$physical)
GetRegResultsbyResponseVariable(cs, "rigid", variables.list$physical)
@

\newpage

\section{Demographic Data}

<<merge.demographic.data, echo=TRUE, cache=TRUE>>=
dem <- read.csv("data/DemoData.csv")
dem <- filter(dem, timept == 1)
cs.dem <- merge(cs, select(dem, id, male, EthHispanic, RaceWhite, 
                 HandedR, MostAffectedR, age, DiseaseDuration), by='id')
dem.variables <-list("male", "MostAffectedR", "age", "DiseaseDuration") 
GetTestResultsbyResponseVariable(cs.dem, "updrs", dem.variables)
GetRegResultsbyResponseVariable(cs.dem, "updrs", dem.variables)
GetTestResultsbyResponseVariable(cs.dem, "axial", dem.variables)
GetRegResultsbyResponseVariable(cs.dem, "axial", dem.variables)
GetTestResultsbyResponseVariable(cs.dem, "tremor", dem.variables)
GetRegResultsbyResponseVariable(cs.dem, "tremor", dem.variables)
GetTestResultsbyResponseVariable(cs.dem, "brady", dem.variables)
GetRegResultsbyResponseVariable(cs.dem, "brady", dem.variables)
GetTestResultsbyResponseVariable(cs.dem, "rigid", dem.variables)
GetRegResultsbyResponseVariable(cs.dem, "rigid", dem.variables)
@

\section{Looking at updrs variables}

<<separation.between.groups>>=
t.test(updrs ~ Group, data=cs.dem)
t.test(axial ~ Group, data=cs.dem)
t.test(tremor ~ Group, data=cs.dem)
t.test(brady ~ Group, data=cs.dem)
t.test(rigid ~ Group, data=cs.dem)
@

\noindent
It looks like there is significant separation between the groups especially in
the rigidity section of the updrs.

<<plots-of-all-change-scores, cache=TRUE, echo=TRUE, fig.height=6, fig.width=8>>=
# select only scores and group and melt
cs.scores <- cs %>% select(one_of(clinical.variables), Group) %>% melt(id.vars="Group")

#look at means, stderr
cs.scores %>% group_by(variable, Group) %>%
  summarize(
    mean=round(mean(value, na.rm=TRUE),2), 
    stdev = round(sd(value, na.rm=TRUE),2),
    N = n()
  )

# plot that shows some of the table above
ggplot(cs.scores, aes(Group, value)) + 
  geom_point(aes(color=Group), position=position_jitterdodge()) + 
  facet_grid(. ~ variable)  +
  geom_boxplot(aes(fill=Group), alpha=0.6, outlier.color="black")

@

\section{Comparing rigidity change score to the original rigidty score}

<<rigid.change.score>>=
rigid_df <- merge(select(d.0, id, rigid_start=rigid), 
                  select(cs.dem, id, Group, rigid_change=rigid))
rigid_melt = melt(rigid_df, id.vars=c("id", "Group"))

qplot(rigid_change, rigid_start, data=rigid_df, color=Group) + geom_smooth(method="lm")
@
\noindent
It looks like the patients who started with high rigidity scores improved the most. 

\section{Significance test for change in td50}

<<td50.analysis>>=
summary(lm(brady ~ td50 + Group + td50:Group, data=cs.dem))
@

\end{document}
